/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.android.functions;

private {
    import derelict.android.types;
    import core.stdc.stdio;
    import core.stdc.config;
    import core.sys.posix.sys.types;
}

extern( C ) {
    // asset_manager.h
    alias nothrow AAssetDir* function(AAssetManager* mgr, const(char)* dirName) da_AAssetManager_openDir;
    alias nothrow AAsset* function(AAssetManager* mgr, const(char)* filename, int mode) da_AAssetManager_open;
    alias nothrow const(char)* function(AAssetDir* assetDir) da_AAssetDir_getNextFileName;
    alias nothrow void function(AAssetDir* assetDir) da_AAssetDir_rewind;
    alias nothrow void function(AAssetDir* assetDir) da_AAssetDir_close;
    alias nothrow int function(AAsset* asset, void* buf, size_t count) da_AAsset_read;
    alias nothrow off_t function(AAsset* asset, off_t offset, int whence) da_AAsset_seek;
    alias nothrow off64_t function(AAsset* asset, off64_t offset, int whence) da_AAsset_seek64;
    alias nothrow void function(AAsset* asset) da_AAsset_close;
    alias nothrow const( void )* function(AAsset* asset) da_AAsset_getBuffer;
    alias nothrow off_t function(AAsset* asset) da_AAsset_getLength;
    alias nothrow off64_t function(AAsset* asset) da_AAsset_getLength64;
    alias nothrow off_t function(AAsset* asset) da_AAsset_getRemainingLength;
    alias nothrow off64_t function(AAsset* asset) da_AAsset_getRemainingLength64;
    alias nothrow int function(AAsset* asset, off_t* outStart, off_t* outLength) da_AAsset_openFileDescriptor;
    alias nothrow int function(AAsset* asset, off64_t* outStart, off64_t* outLength) da_AAsset_openFileDescriptor64;
    alias nothrow int function(AAsset* asset) da_AAsset_isAllocated;

    // configuration.h
    alias nothrow AConfiguration* function() da_AConfiguration_new;
    alias nothrow void function(AConfiguration* config) da_AConfiguration_delete;
    alias nothrow void function(AConfiguration* out_, AAssetManager* am) da_AConfiguration_fromAssetManager;
    alias nothrow void function(AConfiguration* dest, AConfiguration* src) da_AConfiguration_copy;
    alias nothrow int32_t function(AConfiguration* config) da_AConfiguration_getMcc;
    alias nothrow void function(AConfiguration* config, int32_t mcc) da_AConfiguration_setMcc;
    alias nothrow int32_t function(AConfiguration* config) da_AConfiguration_getMnc;
    alias nothrow void function(AConfiguration* config, int32_t mnc) da_AConfiguration_setMnc;
    alias nothrow void function(AConfiguration* config, char* outLanguage) da_AConfiguration_getLanguage;
    alias nothrow void function(AConfiguration* config, const( char )* language) da_AConfiguration_setLanguage;
    alias nothrow void function(AConfiguration* config, char* outCountry) da_AConfiguration_getCountry;
    alias nothrow void function(AConfiguration* config, const( char )* country) da_AConfiguration_setCountry;
    alias nothrow int32_t function(AConfiguration* config) da_AConfiguration_getOrientation;
    alias nothrow void function(AConfiguration* config, int32_t orientation) da_AConfiguration_setOrientation;
    alias nothrow int32_t function(AConfiguration* config) da_AConfiguration_getTouchscreen;
    alias nothrow void function(AConfiguration* config, int32_t touchscreen) da_AConfiguration_setTouchscreen;
    alias nothrow int32_t function(AConfiguration* config) da_AConfiguration_getDensity;
    alias nothrow void function(AConfiguration* config, int32_t density) da_AConfiguration_setDensity;
    alias nothrow int32_t function(AConfiguration* config) da_AConfiguration_getKeyboard;
    alias nothrow void function(AConfiguration* config, int32_t keyboard) da_AConfiguration_setKeyboard;
    alias nothrow int32_t function(AConfiguration* config) da_AConfiguration_getNavigation;
    alias nothrow void function(AConfiguration* config, int32_t navigation) da_AConfiguration_setNavigation;
    alias nothrow int32_t function(AConfiguration* config) da_AConfiguration_getKeysHidden;
    alias nothrow void function(AConfiguration* config, int32_t keysHidden) da_AConfiguration_setKeysHidden;
    alias nothrow int32_t function(AConfiguration* config) da_AConfiguration_getNavHidden;
    alias nothrow void function(AConfiguration* config, int32_t navHidden) da_AConfiguration_setNavHidden;
    alias nothrow int32_t function(AConfiguration* config) da_AConfiguration_getSdkVersion;
    alias nothrow void function(AConfiguration* config, int32_t sdkVersion) da_AConfiguration_setSdkVersion;
    alias nothrow int32_t function(AConfiguration* config) da_AConfiguration_getScreenSize;
    alias nothrow void function(AConfiguration* config, int32_t screenSize) da_AConfiguration_setScreenSize;
    alias nothrow int32_t function(AConfiguration* config) da_AConfiguration_getScreenLong;
    alias nothrow void function(AConfiguration* config, int32_t screenLong) da_AConfiguration_setScreenLong;
    alias nothrow int32_t function(AConfiguration* config) da_AConfiguration_getUiModeType;
    alias nothrow void function(AConfiguration* config, int32_t uiModeType) da_AConfiguration_setUiModeType;
    alias nothrow int32_t function(AConfiguration* config) da_AConfiguration_getUiModeNight;
    alias nothrow void function(AConfiguration* config, int32_t uiModeNight) da_AConfiguration_setUiModeNight;
    alias nothrow int32_t function(AConfiguration* config) da_AConfiguration_getScreenWidthDp;
    alias nothrow void function(AConfiguration* config, int32_t value) da_AConfiguration_setScreenWidthDp;
    alias nothrow int32_t function(AConfiguration* config) da_AConfiguration_getScreenHeightDp;
    alias nothrow void function(AConfiguration* config, int32_t value) da_AConfiguration_setScreenHeightDp;
    alias nothrow int32_t function(AConfiguration* config) da_AConfiguration_getSmallestScreenWidthDp;
    alias nothrow void function(AConfiguration* config, int32_t value) da_AConfiguration_setSmallestScreenWidthDp;
    alias nothrow int32_t function(AConfiguration* config) da_AConfiguration_getLayoutDirection;
    alias nothrow void function(AConfiguration* config, int32_t value) da_AConfiguration_setLayoutDirection;
    alias nothrow int32_t function(AConfiguration* config1, AConfiguration* config2) da_AConfiguration_diff;
    alias nothrow int32_t function(AConfiguration* base, AConfiguration* requested) da_AConfiguration_match;
    alias nothrow int32_t function(AConfiguration* base, AConfiguration* test, AConfiguration* requested) da_AConfiguration_isBetterThan;

    // input.h
    alias nothrow int32_t function(const( AInputEvent )* event) da_AInputEvent_getType;
    alias nothrow int32_t function(const( AInputEvent )* event) da_AInputEvent_getDeviceId;
    alias nothrow int32_t function(const( AInputEvent )* event) da_AInputEvent_getSource;
    alias nothrow int32_t function(const( AInputEvent )* key_event) da_AKeyEvent_getAction;
    alias nothrow int32_t function(const( AInputEvent )* key_event) da_AKeyEvent_getFlags;
    alias nothrow int32_t function(const( AInputEvent )* key_event) da_AKeyEvent_getKeyCode;
    alias nothrow int32_t function(const( AInputEvent )* key_event) da_AKeyEvent_getScanCode;
    alias nothrow int32_t function(const( AInputEvent )* key_event) da_AKeyEvent_getMetaState;
    alias nothrow int32_t function(const( AInputEvent )* key_event) da_AKeyEvent_getRepeatCount;
    alias nothrow int64_t function(const( AInputEvent )* key_event) da_AKeyEvent_getDownTime;
    alias nothrow int64_t function(const( AInputEvent )* key_event) da_AKeyEvent_getEventTime;
    alias nothrow int32_t function(const( AInputEvent )* motion_event) da_AMotionEvent_getAction;
    alias nothrow int32_t function(const( AInputEvent )* motion_event) da_AMotionEvent_getFlags;
    alias nothrow int32_t function(const( AInputEvent )* motion_event) da_AMotionEvent_getMetaState;
    alias nothrow int32_t function(const( AInputEvent )* motion_event) da_AMotionEvent_getButtonState;
    alias nothrow int32_t function(const( AInputEvent )* motion_event) da_AMotionEvent_getEdgeFlags;
    alias nothrow int64_t function(const( AInputEvent )* motion_event) da_AMotionEvent_getDownTime;
    alias nothrow int64_t function(const( AInputEvent )* motion_event) da_AMotionEvent_getEventTime;
    alias nothrow float function(const( AInputEvent )* motion_event) da_AMotionEvent_getXOffset;
    alias nothrow float function(const( AInputEvent )* motion_event) da_AMotionEvent_getYOffset;
    alias nothrow float function(const( AInputEvent )* motion_event) da_AMotionEvent_getXPrecision;
    alias nothrow float function(const( AInputEvent )* motion_event) da_AMotionEvent_getYPrecision;
    alias nothrow size_t function(const( AInputEvent )* motion_event) da_AMotionEvent_getPointerCount;
    alias nothrow int32_t function(const( AInputEvent )* motion_event, size_t pointer_index) da_AMotionEvent_getPointerId;
    alias nothrow int32_t function(const( AInputEvent )* motion_event, size_t pointer_index) da_AMotionEvent_getToolType;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index) da_AMotionEvent_getRawX;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index) da_AMotionEvent_getRawY;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index) da_AMotionEvent_getX;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index) da_AMotionEvent_getY;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index) da_AMotionEvent_getPressure;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index) da_AMotionEvent_getSize;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index) da_AMotionEvent_getTouchMajor;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index) da_AMotionEvent_getTouchMinor;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index) da_AMotionEvent_getToolMajor;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index) da_AMotionEvent_getToolMinor;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index) da_AMotionEvent_getOrientation;
    alias nothrow float function(const( AInputEvent )* motion_event,
            int32_t axis, size_t pointer_index) da_AMotionEvent_getAxisValue;
    alias nothrow size_t function(const( AInputEvent )* motion_event) da_AMotionEvent_getHistorySize;
    alias nothrow int64_t function(const( AInputEvent )* motion_event,
            size_t history_index) da_AMotionEvent_getHistoricalEventTime;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index,
            size_t history_index) da_AMotionEvent_getHistoricalRawX;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index,
            size_t history_index) da_AMotionEvent_getHistoricalRawY;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index,
            size_t history_index) da_AMotionEvent_getHistoricalX;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index,
            size_t history_index) da_AMotionEvent_getHistoricalY;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index,
            size_t history_index) da_AMotionEvent_getHistoricalPressure;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index,
            size_t history_index) da_AMotionEvent_getHistoricalSize;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index,
            size_t history_index) da_AMotionEvent_getHistoricalTouchMajor;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index,
            size_t history_index) da_AMotionEvent_getHistoricalTouchMinor;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index,
            size_t history_index) da_AMotionEvent_getHistoricalToolMajor;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index,
            size_t history_index) da_AMotionEvent_getHistoricalToolMinor;
    alias nothrow float function(const( AInputEvent )* motion_event, size_t pointer_index,
            size_t history_index) da_AMotionEvent_getHistoricalOrientation;
    alias nothrow float function(const( AInputEvent )* motion_event,
            int32_t axis, size_t pointer_index, size_t history_index) da_AMotionEvent_getHistoricalAxisValue;
    alias nothrow void function(AInputQueue* queue, ALooper* looper,
            int ident, ALooper_callbackFunc callback, void* data) da_AInputQueue_attachLooper;
    alias nothrow void function(AInputQueue* queue) da_AInputQueue_detachLooper;
    alias nothrow int32_t function(AInputQueue* queue) da_AInputQueue_hasEvents;
    alias nothrow int32_t function(AInputQueue* queue, AInputEvent** outEvent) da_AInputQueue_getEvent;
    alias nothrow int32_t function(AInputQueue* queue, AInputEvent* event) da_AInputQueue_preDispatchEvent;
    alias nothrow void function(AInputQueue* queue, AInputEvent* event, int handled) da_AInputQueue_finishEvent;

    // log.h
    alias nothrow int function(int prio, const( char )* tag, const( char )* text) da___android_log_write;

    // looper.h
    alias nothrow ALooper* function() da_ALooper_forThread;
    alias nothrow ALooper* function(int opts) da_ALooper_prepare;
    alias nothrow void function(ALooper* looper) da_ALooper_acquire;
    alias nothrow void function(ALooper* looper) da_ALooper_release;
    alias nothrow int function(int timeoutMillis, int* outFd, int* outEvents, void** outData) da_ALooper_pollOnce;
    alias nothrow int function(int timeoutMillis, int* outFd, int* outEvents, void** outData) da_ALooper_pollAll;
    alias nothrow void function(ALooper* looper) da_ALooper_wake;
    alias nothrow int function(ALooper* looper, int fd, int ident, int events,
            ALooper_callbackFunc callback, void* data) da_ALooper_addFd;
    alias nothrow int function(ALooper* looper, int fd) da_ALooper_removeFd;

    // native_activity.h
    alias nothrow void function(ANativeActivity* activity) da_ANativeActivity_finish;
    alias nothrow void function(ANativeActivity* activity, int32_t format) da_ANativeActivity_setWindowFormat;
    alias nothrow void function(ANativeActivity* activity,
            uint32_t addFlags, uint32_t removeFlags) da_ANativeActivity_setWindowFlags;
    alias nothrow void function(ANativeActivity* activity, uint32_t flags) da_ANativeActivity_showSoftInput;
    alias nothrow void function(ANativeActivity* activity, uint32_t flags) da_ANativeActivity_hideSoftInput;

    // native_window.h
    alias nothrow void function(ANativeWindow* window) da_ANativeWindow_acquire;
    alias nothrow void function(ANativeWindow* window) da_ANativeWindow_release;
    alias nothrow int32_t function(ANativeWindow* window) da_ANativeWindow_getWidth;
    alias nothrow int32_t function(ANativeWindow* window) da_ANativeWindow_getHeight;
    alias nothrow int32_t function(ANativeWindow* window) da_ANativeWindow_getFormat;
    alias nothrow int32_t function(ANativeWindow* window,
            int32_t width, int32_t height, int32_t format) da_ANativeWindow_setBuffersGeometry;
    alias nothrow int32_t function(ANativeWindow* window, ANativeWindow_Buffer* outBuffer,
            ARect* inOutDirtyBounds) da_ANativeWindow_lock;
    alias nothrow int32_t function(ANativeWindow* window) da_ANativeWindow_unlockAndPost;

    // obb.h
    alias nothrow AObbInfo* function(const( char )* filename) da_AObbScanner_getObbInfo;
    alias nothrow void function(AObbInfo* obbInfo) da_AObbInfo_delete;
    alias nothrow const( char )* function(AObbInfo* obbInfo) da_AObbInfo_getPackageName;
    alias nothrow int32_t function(AObbInfo* obbInfo) da_AObbInfo_getVersion;
    alias nothrow int32_t function(AObbInfo* obbInfo) da_AObbInfo_getFlags;

    // sensor.h
    alias nothrow ASensorManager* function() da_ASensorManager_getInstance;
    alias nothrow int function(ASensorManager* manager, ASensorList* list) da_ASensorManager_getSensorList;
    alias nothrow const( ASensor )* function(ASensorManager* manager, int type) da_ASensorManager_getDefaultSensor;
    alias nothrow ASensorEventQueue* function(ASensorManager* manager,
            ALooper* looper, int ident, ALooper_callbackFunc callback, void* data) da_ASensorManager_createEventQueue;
    alias nothrow int function(ASensorManager* manager, ASensorEventQueue* queue) da_ASensorManager_destroyEventQueue;
    alias nothrow int function(ASensorEventQueue* queue, const( ASensor )* sensor) da_ASensorEventQueue_enableSensor;
    alias nothrow int function(ASensorEventQueue* queue, const( ASensor )* sensor) da_ASensorEventQueue_disableSensor;
    alias nothrow int function(ASensorEventQueue* queue, const( ASensor )* sensor, int32_t usec) da_ASensorEventQueue_setEventRate;
    alias nothrow int function(ASensorEventQueue* queue) da_ASensorEventQueue_hasEvents;
    alias nothrow ssize_t function(ASensorEventQueue* queue,
                    ASensorEvent* events, size_t count) da_ASensorEventQueue_getEvents;
    alias nothrow const( char )* function(const( ASensor )* sensor) da_ASensor_getName;
    alias nothrow const( char )* function(const( ASensor )* sensor) da_ASensor_getVendor;
    alias nothrow int function(const( ASensor )* sensor) da_ASensor_getType;
    alias nothrow float function(const( ASensor )* sensor) da_ASensor_getResolution;
    alias nothrow int function(const( ASensor )* sensor) da_ASensor_getMinDelay;

    // storage_manager.h
    alias nothrow AStorageManager* function() da_AStorageManager_new;
    alias nothrow void function(AStorageManager* mgr) da_AStorageManager_delete;
    alias nothrow void function(AStorageManager* mgr, const( char )* filename, const( char )* key,
            AStorageManager_obbCallbackFunc cb, void* data) da_AStorageManager_mountObb;
    alias nothrow void function(AStorageManager* mgr, const( char )* filename, const( int ) force,
            AStorageManager_obbCallbackFunc cb, void* data) da_AStorageManager_unmountObb;
    alias nothrow int function(AStorageManager* mgr, const( char )* filename) da_AStorageManager_isObbMounted;
    alias nothrow const( char )* function(AStorageManager* mgr, const( char )* filename) da_AStorageManager_getMountedObbPath;

}

__gshared {
    da_AAssetManager_openDir AAssetManager_openDir;
    da_AAssetManager_open AAssetManager_open;
    da_AAssetDir_getNextFileName AAssetDir_getNextFileName;
    da_AAssetDir_rewind AAssetDir_rewind;
    da_AAssetDir_close AAssetDir_close;
    da_AAsset_read AAsset_read;
    da_AAsset_seek AAsset_seek;
    da_AAsset_seek64 AAsset_seek64;
    da_AAsset_close AAsset_close;
    da_AAsset_getLength AAsset_getLength;
    da_AAsset_getLength64 AAsset_getLength64;
    da_AAsset_getRemainingLength AAsset_getRemainingLength;
    da_AAsset_getRemainingLength64 AAsset_getRemainingLength64;
    da_AAsset_openFileDescriptor AAsset_openFileDescriptor;
    da_AAsset_openFileDescriptor64 AAsset_openFileDescriptor64;
    da_AAsset_isAllocated AAsset_isAllocated;
    da_AConfiguration_new AConfiguration_new;
    da_AConfiguration_delete AConfiguration_delete;
    da_AConfiguration_fromAssetManager AConfiguration_fromAssetManager;
    da_AConfiguration_copy AConfiguration_copy;
    da_AConfiguration_getMcc AConfiguration_getMcc;
    da_AConfiguration_setMcc AConfiguration_setMcc;
    da_AConfiguration_getMnc AConfiguration_getMnc;
    da_AConfiguration_setMnc AConfiguration_setMnc;
    da_AConfiguration_getLanguage AConfiguration_getLanguage;
    da_AConfiguration_setLanguage AConfiguration_setLanguage;
    da_AConfiguration_getCountry AConfiguration_getCountry;
    da_AConfiguration_setCountry AConfiguration_setCountry;
    da_AConfiguration_getOrientation AConfiguration_getOrientation;
    da_AConfiguration_setOrientation AConfiguration_setOrientation;
    da_AConfiguration_getTouchscreen AConfiguration_getTouchscreen;
    da_AConfiguration_setTouchscreen AConfiguration_setTouchscreen;
    da_AConfiguration_getDensity AConfiguration_getDensity;
    da_AConfiguration_setDensity AConfiguration_setDensity;
    da_AConfiguration_getKeyboard AConfiguration_getKeyboard;
    da_AConfiguration_setKeyboard AConfiguration_setKeyboard;
    da_AConfiguration_getNavigation AConfiguration_getNavigation;
    da_AConfiguration_setNavigation AConfiguration_setNavigation;
    da_AConfiguration_getKeysHidden AConfiguration_getKeysHidden;
    da_AConfiguration_setKeysHidden AConfiguration_setKeysHidden;
    da_AConfiguration_getNavHidden AConfiguration_getNavHidden;
    da_AConfiguration_setNavHidden AConfiguration_setNavHidden;
    da_AConfiguration_getSdkVersion AConfiguration_getSdkVersion;
    da_AConfiguration_setSdkVersion AConfiguration_setSdkVersion;
    da_AConfiguration_getScreenSize AConfiguration_getScreenSize;
    da_AConfiguration_setScreenSize AConfiguration_setScreenSize;
    da_AConfiguration_getScreenLong AConfiguration_getScreenLong;
    da_AConfiguration_setScreenLong AConfiguration_setScreenLong;
    da_AConfiguration_getUiModeType AConfiguration_getUiModeType;
    da_AConfiguration_setUiModeType AConfiguration_setUiModeType;
    da_AConfiguration_getUiModeNight AConfiguration_getUiModeNight;
    da_AConfiguration_setUiModeNight AConfiguration_setUiModeNight;
    da_AConfiguration_getScreenWidthDp AConfiguration_getScreenWidthDp;
    da_AConfiguration_setScreenWidthDp AConfiguration_setScreenWidthDp;
    da_AConfiguration_getScreenHeightDp AConfiguration_getScreenHeightDp;
    da_AConfiguration_setScreenHeightDp AConfiguration_setScreenHeightDp;
    da_AConfiguration_getSmallestScreenWidthDp AConfiguration_getSmallestScreenWidthDp;
    da_AConfiguration_setSmallestScreenWidthDp AConfiguration_setSmallestScreenWidthDp;
    da_AConfiguration_getLayoutDirection AConfiguration_getLayoutDirection;
    da_AConfiguration_setLayoutDirection AConfiguration_setLayoutDirection;
    da_AConfiguration_diff AConfiguration_diff;
    da_AConfiguration_match AConfiguration_match;
    da_AConfiguration_isBetterThan AConfiguration_isBetterThan;
    da_AInputEvent_getType AInputEvent_getType;
    da_AInputEvent_getDeviceId AInputEvent_getDeviceId;
    da_AInputEvent_getSource AInputEvent_getSource;
    da_AKeyEvent_getAction AKeyEvent_getAction;
    da_AKeyEvent_getFlags AKeyEvent_getFlags;
    da_AKeyEvent_getKeyCode AKeyEvent_getKeyCode;
    da_AKeyEvent_getScanCode AKeyEvent_getScanCode;
    da_AKeyEvent_getMetaState AKeyEvent_getMetaState;
    da_AKeyEvent_getRepeatCount AKeyEvent_getRepeatCount;
    da_AKeyEvent_getDownTime AKeyEvent_getDownTime;
    da_AKeyEvent_getEventTime AKeyEvent_getEventTime;
    da_AMotionEvent_getAction AMotionEvent_getAction;
    da_AMotionEvent_getFlags AMotionEvent_getFlags;
    da_AMotionEvent_getMetaState AMotionEvent_getMetaState;
    da_AMotionEvent_getButtonState AMotionEvent_getButtonState;
    da_AMotionEvent_getEdgeFlags AMotionEvent_getEdgeFlags;
    da_AMotionEvent_getDownTime AMotionEvent_getDownTime;
    da_AMotionEvent_getEventTime AMotionEvent_getEventTime;
    da_AMotionEvent_getXOffset AMotionEvent_getXOffset;
    da_AMotionEvent_getYOffset AMotionEvent_getYOffset;
    da_AMotionEvent_getXPrecision AMotionEvent_getXPrecision;
    da_AMotionEvent_getYPrecision AMotionEvent_getYPrecision;
    da_AMotionEvent_getPointerCount AMotionEvent_getPointerCount;
    da_AMotionEvent_getPointerId AMotionEvent_getPointerId;
    da_AMotionEvent_getToolType AMotionEvent_getToolType;
    da_AMotionEvent_getRawX AMotionEvent_getRawX;
    da_AMotionEvent_getRawY AMotionEvent_getRawY;
    da_AMotionEvent_getX AMotionEvent_getX;
    da_AMotionEvent_getY AMotionEvent_getY;
    da_AMotionEvent_getPressure AMotionEvent_getPressure;
    da_AMotionEvent_getSize AMotionEvent_getSize;
    da_AMotionEvent_getTouchMajor AMotionEvent_getTouchMajor;
    da_AMotionEvent_getTouchMinor AMotionEvent_getTouchMinor;
    da_AMotionEvent_getToolMajor AMotionEvent_getToolMajor;
    da_AMotionEvent_getToolMinor AMotionEvent_getToolMinor;
    da_AMotionEvent_getOrientation AMotionEvent_getOrientation;
    da_AMotionEvent_getAxisValue AMotionEvent_getAxisValue;
    da_AMotionEvent_getHistorySize AMotionEvent_getHistorySize;
    da_AMotionEvent_getHistoricalEventTime AMotionEvent_getHistoricalEventTime;
    da_AMotionEvent_getHistoricalRawX AMotionEvent_getHistoricalRawX;
    da_AMotionEvent_getHistoricalRawY AMotionEvent_getHistoricalRawY;
    da_AMotionEvent_getHistoricalX AMotionEvent_getHistoricalX;
    da_AMotionEvent_getHistoricalY AMotionEvent_getHistoricalY;
    da_AMotionEvent_getHistoricalPressure AMotionEvent_getHistoricalPressure;
    da_AMotionEvent_getHistoricalSize AMotionEvent_getHistoricalSize;
    da_AMotionEvent_getHistoricalTouchMajor AMotionEvent_getHistoricalTouchMajor;
    da_AMotionEvent_getHistoricalTouchMinor AMotionEvent_getHistoricalTouchMinor;
    da_AMotionEvent_getHistoricalToolMajor AMotionEvent_getHistoricalToolMajor;
    da_AMotionEvent_getHistoricalToolMinor AMotionEvent_getHistoricalToolMinor;
    da_AMotionEvent_getHistoricalOrientation AMotionEvent_getHistoricalOrientation;
    da_AMotionEvent_getHistoricalAxisValue AMotionEvent_getHistoricalAxisValue;
    da_AInputQueue_attachLooper AInputQueue_attachLooper;
    da_AInputQueue_detachLooper AInputQueue_detachLooper;
    da_AInputQueue_hasEvents AInputQueue_hasEvents;
    da_AInputQueue_getEvent AInputQueue_getEvent;
    da_AInputQueue_preDispatchEvent AInputQueue_preDispatchEvent;
    da_AInputQueue_finishEvent AInputQueue_finishEvent;
    da___android_log_write __android_log_write;
    da_ALooper_forThread ALooper_forThread;
    da_ALooper_prepare ALooper_prepare;
    da_ALooper_acquire ALooper_acquire;
    da_ALooper_release ALooper_release;
    da_ALooper_pollOnce ALooper_pollOnce;
    da_ALooper_pollAll ALooper_pollAll;
    da_ALooper_wake ALooper_wake;
    da_ALooper_addFd ALooper_addFd;
    da_ALooper_removeFd ALooper_removeFd;
    da_ANativeActivity_finish ANativeActivity_finish;
    da_ANativeActivity_setWindowFormat ANativeActivity_setWindowFormat;
    da_ANativeActivity_setWindowFlags ANativeActivity_setWindowFlags;
    da_ANativeActivity_showSoftInput ANativeActivity_showSoftInput;
    da_ANativeActivity_hideSoftInput ANativeActivity_hideSoftInput;
    da_ANativeWindow_acquire ANativeWindow_acquire;
    da_ANativeWindow_release ANativeWindow_release;
    da_ANativeWindow_getWidth ANativeWindow_getWidth;
    da_ANativeWindow_getHeight ANativeWindow_getHeight;
    da_ANativeWindow_getFormat ANativeWindow_getFormat;
    da_ANativeWindow_setBuffersGeometry ANativeWindow_setBuffersGeometry;
    da_ANativeWindow_lock ANativeWindow_lock;
    da_ANativeWindow_unlockAndPost ANativeWindow_unlockAndPost;
    da_AObbScanner_getObbInfo AObbScanner_getObbInfo;
    da_AObbInfo_delete AObbInfo_delete;
    da_AObbInfo_getPackageName AObbInfo_getPackageName;
    da_AObbInfo_getVersion AObbInfo_getVersion;
    da_AObbInfo_getFlags AObbInfo_getFlags;
    da_ASensorManager_getInstance ASensorManager_getInstance;
    da_ASensorManager_getSensorList ASensorManager_getSensorList;
    da_ASensorManager_getDefaultSensor ASensorManager_getDefaultSensor;
    da_ASensorManager_createEventQueue ASensorManager_createEventQueue;
    da_ASensorManager_destroyEventQueue ASensorManager_destroyEventQueue;
    da_ASensorEventQueue_enableSensor ASensorEventQueue_enableSensor;
    da_ASensorEventQueue_disableSensor ASensorEventQueue_disableSensor;
    da_ASensorEventQueue_setEventRate ASensorEventQueue_setEventRate;
    da_ASensorEventQueue_hasEvents ASensorEventQueue_hasEvents;
    da_ASensorEventQueue_getEvents ASensorEventQueue_getEvents;
    da_ASensor_getName ASensor_getName;
    da_ASensor_getVendor ASensor_getVendor;
    da_ASensor_getType ASensor_getType;
    da_ASensor_getResolution ASensor_getResolution;
    da_ASensor_getMinDelay ASensor_getMinDelay;
    da_AStorageManager_new AStorageManager_new;
    da_AStorageManager_delete AStorageManager_delete;
    da_AStorageManager_mountObb AStorageManager_mountObb;
    da_AStorageManager_unmountObb AStorageManager_unmountObb;
    da_AStorageManager_isObbMounted AStorageManager_isObbMounted;
    da_AStorageManager_getMountedObbPath AStorageManager_getMountedObbPath;
}
