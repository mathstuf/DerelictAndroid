/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.android.android;

public {
    import derelict.android.types;
    import derelict.android.functions;
}

private {
    import derelict.util.loader;
    import derelict.util.system;

    static assert( Derelict_OS_Android );

    enum libNames = "android.so";
}

class DerelictAndroidLoader : SharedLibLoader {
    public this() {
        super( libNames );
    }

    protected override void loadSymbols() {
        bindFunc( cast( void** )&AAssetManager_openDir, "AAssetManager_openDir" );
        bindFunc( cast( void** )&AAssetManager_open, "AAssetManager_open" );
        bindFunc( cast( void** )&AAssetDir_getNextFileName, "AAssetDir_getNextFileName" );
        bindFunc( cast( void** )&AAssetDir_rewind, "AAssetDir_rewind" );
        bindFunc( cast( void** )&AAssetDir_close, "AAssetDir_close" );
        bindFunc( cast( void** )&AAsset_read, "AAsset_read" );
        bindFunc( cast( void** )&AAsset_seek, "AAsset_seek" );
        bindFunc( cast( void** )&AAsset_seek64, "AAsset_seek64" );
        bindFunc( cast( void** )&AAsset_close, "AAsset_close" );
        bindFunc( cast( void** )&AAsset_getLength, "AAsset_getLength" );
        bindFunc( cast( void** )&AAsset_getLength64, "AAsset_getLength64" );
        bindFunc( cast( void** )&AAsset_getRemainingLength, "AAsset_getRemainingLength" );
        bindFunc( cast( void** )&AAsset_getRemainingLength64, "AAsset_getRemainingLength64" );
        bindFunc( cast( void** )&AAsset_openFileDescriptor, "AAsset_openFileDescriptor" );
        bindFunc( cast( void** )&AAsset_openFileDescriptor64, "AAsset_openFileDescriptor64" );
        bindFunc( cast( void** )&AAsset_isAllocated, "AAsset_isAllocated" );
        bindFunc( cast( void** )&AConfiguration_new, "AConfiguration_new" );
        bindFunc( cast( void** )&AConfiguration_delete, "AConfiguration_delete" );
        bindFunc( cast( void** )&AConfiguration_fromAssetManager, "AConfiguration_fromAssetManager" );
        bindFunc( cast( void** )&AConfiguration_copy, "AConfiguration_copy" );
        bindFunc( cast( void** )&AConfiguration_getMcc, "AConfiguration_getMcc" );
        bindFunc( cast( void** )&AConfiguration_setMcc, "AConfiguration_setMcc" );
        bindFunc( cast( void** )&AConfiguration_getMnc, "AConfiguration_getMnc" );
        bindFunc( cast( void** )&AConfiguration_setMnc, "AConfiguration_setMnc" );
        bindFunc( cast( void** )&AConfiguration_getLanguage, "AConfiguration_getLanguage" );
        bindFunc( cast( void** )&AConfiguration_setLanguage, "AConfiguration_setLanguage" );
        bindFunc( cast( void** )&AConfiguration_getCountry, "AConfiguration_getCountry" );
        bindFunc( cast( void** )&AConfiguration_setCountry, "AConfiguration_setCountry" );
        bindFunc( cast( void** )&AConfiguration_getOrientation, "AConfiguration_getOrientation" );
        bindFunc( cast( void** )&AConfiguration_setOrientation, "AConfiguration_setOrientation" );
        bindFunc( cast( void** )&AConfiguration_getTouchscreen, "AConfiguration_getTouchscreen" );
        bindFunc( cast( void** )&AConfiguration_setTouchscreen, "AConfiguration_setTouchscreen" );
        bindFunc( cast( void** )&AConfiguration_getDensity, "AConfiguration_getDensity" );
        bindFunc( cast( void** )&AConfiguration_setDensity, "AConfiguration_setDensity" );
        bindFunc( cast( void** )&AConfiguration_getKeyboard, "AConfiguration_getKeyboard" );
        bindFunc( cast( void** )&AConfiguration_setKeyboard, "AConfiguration_setKeyboard" );
        bindFunc( cast( void** )&AConfiguration_getNavigation, "AConfiguration_getNavigation" );
        bindFunc( cast( void** )&AConfiguration_setNavigation, "AConfiguration_setNavigation" );
        bindFunc( cast( void** )&AConfiguration_getKeysHidden, "AConfiguration_getKeysHidden" );
        bindFunc( cast( void** )&AConfiguration_setKeysHidden, "AConfiguration_setKeysHidden" );
        bindFunc( cast( void** )&AConfiguration_getNavHidden, "AConfiguration_getNavHidden" );
        bindFunc( cast( void** )&AConfiguration_setNavHidden, "AConfiguration_setNavHidden" );
        bindFunc( cast( void** )&AConfiguration_getSdkVersion, "AConfiguration_getSdkVersion" );
        bindFunc( cast( void** )&AConfiguration_setSdkVersion, "AConfiguration_setSdkVersion" );
        bindFunc( cast( void** )&AConfiguration_getScreenSize, "AConfiguration_getScreenSize" );
        bindFunc( cast( void** )&AConfiguration_setScreenSize, "AConfiguration_setScreenSize" );
        bindFunc( cast( void** )&AConfiguration_getScreenLong, "AConfiguration_getScreenLong" );
        bindFunc( cast( void** )&AConfiguration_setScreenLong, "AConfiguration_setScreenLong" );
        bindFunc( cast( void** )&AConfiguration_getUiModeType, "AConfiguration_getUiModeType" );
        bindFunc( cast( void** )&AConfiguration_setUiModeType, "AConfiguration_setUiModeType" );
        bindFunc( cast( void** )&AConfiguration_getUiModeNight, "AConfiguration_getUiModeNight" );
        bindFunc( cast( void** )&AConfiguration_setUiModeNight, "AConfiguration_setUiModeNight" );
        bindFunc( cast( void** )&AConfiguration_getScreenWidthDp, "AConfiguration_getScreenWidthDp" );
        bindFunc( cast( void** )&AConfiguration_setScreenWidthDp, "AConfiguration_setScreenWidthDp" );
        bindFunc( cast( void** )&AConfiguration_getScreenHeightDp, "AConfiguration_getScreenHeightDp" );
        bindFunc( cast( void** )&AConfiguration_setScreenHeightDp, "AConfiguration_setScreenHeightDp" );
        bindFunc( cast( void** )&AConfiguration_getSmallestScreenWidthDp, "AConfiguration_getSmallestScreenWidthDp" );
        bindFunc( cast( void** )&AConfiguration_setSmallestScreenWidthDp, "AConfiguration_setSmallestScreenWidthDp" );
        bindFunc( cast( void** )&AConfiguration_getLayoutDirection, "AConfiguration_getLayoutDirection" );
        bindFunc( cast( void** )&AConfiguration_setLayoutDirection, "AConfiguration_setLayoutDirection" );
        bindFunc( cast( void** )&AConfiguration_diff, "AConfiguration_diff" );
        bindFunc( cast( void** )&AConfiguration_match, "AConfiguration_match" );
        bindFunc( cast( void** )&AConfiguration_isBetterThan, "AConfiguration_isBetterThan" );
        bindFunc( cast( void** )&AInputEvent_getType, "AInputEvent_getType" );
        bindFunc( cast( void** )&AInputEvent_getDeviceId, "AInputEvent_getDeviceId" );
        bindFunc( cast( void** )&AInputEvent_getSource, "AInputEvent_getSource" );
        bindFunc( cast( void** )&AKeyEvent_getAction, "AKeyEvent_getAction" );
        bindFunc( cast( void** )&AKeyEvent_getFlags, "AKeyEvent_getFlags" );
        bindFunc( cast( void** )&AKeyEvent_getKeyCode, "AKeyEvent_getKeyCode" );
        bindFunc( cast( void** )&AKeyEvent_getScanCode, "AKeyEvent_getScanCode" );
        bindFunc( cast( void** )&AKeyEvent_getMetaState, "AKeyEvent_getMetaState" );
        bindFunc( cast( void** )&AKeyEvent_getRepeatCount, "AKeyEvent_getRepeatCount" );
        bindFunc( cast( void** )&AKeyEvent_getDownTime, "AKeyEvent_getDownTime" );
        bindFunc( cast( void** )&AKeyEvent_getEventTime, "AKeyEvent_getEventTime" );
        bindFunc( cast( void** )&AMotionEvent_getAction, "AMotionEvent_getAction" );
        bindFunc( cast( void** )&AMotionEvent_getFlags, "AMotionEvent_getFlags" );
        bindFunc( cast( void** )&AMotionEvent_getMetaState, "AMotionEvent_getMetaState" );
        bindFunc( cast( void** )&AMotionEvent_getButtonState, "AMotionEvent_getButtonState" );
        bindFunc( cast( void** )&AMotionEvent_getEdgeFlags, "AMotionEvent_getEdgeFlags" );
        bindFunc( cast( void** )&AMotionEvent_getDownTime, "AMotionEvent_getDownTime" );
        bindFunc( cast( void** )&AMotionEvent_getEventTime, "AMotionEvent_getEventTime" );
        bindFunc( cast( void** )&AMotionEvent_getXOffset, "AMotionEvent_getXOffset" );
        bindFunc( cast( void** )&AMotionEvent_getYOffset, "AMotionEvent_getYOffset" );
        bindFunc( cast( void** )&AMotionEvent_getXPrecision, "AMotionEvent_getXPrecision" );
        bindFunc( cast( void** )&AMotionEvent_getYPrecision, "AMotionEvent_getYPrecision" );
        bindFunc( cast( void** )&AMotionEvent_getPointerCount, "AMotionEvent_getPointerCount" );
        bindFunc( cast( void** )&AMotionEvent_getPointerId, "AMotionEvent_getPointerId" );
        bindFunc( cast( void** )&AMotionEvent_getToolType, "AMotionEvent_getToolType" );
        bindFunc( cast( void** )&AMotionEvent_getRawX, "AMotionEvent_getRawX" );
        bindFunc( cast( void** )&AMotionEvent_getRawY, "AMotionEvent_getRawY" );
        bindFunc( cast( void** )&AMotionEvent_getX, "AMotionEvent_getX" );
        bindFunc( cast( void** )&AMotionEvent_getY, "AMotionEvent_getY" );
        bindFunc( cast( void** )&AMotionEvent_getPressure, "AMotionEvent_getPressure" );
        bindFunc( cast( void** )&AMotionEvent_getSize, "AMotionEvent_getSize" );
        bindFunc( cast( void** )&AMotionEvent_getTouchMajor, "AMotionEvent_getTouchMajor" );
        bindFunc( cast( void** )&AMotionEvent_getTouchMinor, "AMotionEvent_getTouchMinor" );
        bindFunc( cast( void** )&AMotionEvent_getToolMajor, "AMotionEvent_getToolMajor" );
        bindFunc( cast( void** )&AMotionEvent_getToolMinor, "AMotionEvent_getToolMinor" );
        bindFunc( cast( void** )&AMotionEvent_getOrientation, "AMotionEvent_getOrientation" );
        bindFunc( cast( void** )&AMotionEvent_getAxisValue, "AMotionEvent_getAxisValue" );
        bindFunc( cast( void** )&AMotionEvent_getHistorySize, "AMotionEvent_getHistorySize" );
        bindFunc( cast( void** )&AMotionEvent_getHistoricalEventTime, "AMotionEvent_getHistoricalEventTime" );
        bindFunc( cast( void** )&AMotionEvent_getHistoricalRawX, "AMotionEvent_getHistoricalRawX" );
        bindFunc( cast( void** )&AMotionEvent_getHistoricalRawY, "AMotionEvent_getHistoricalRawY" );
        bindFunc( cast( void** )&AMotionEvent_getHistoricalX, "AMotionEvent_getHistoricalX" );
        bindFunc( cast( void** )&AMotionEvent_getHistoricalY, "AMotionEvent_getHistoricalY" );
        bindFunc( cast( void** )&AMotionEvent_getHistoricalPressure, "AMotionEvent_getHistoricalPressure" );
        bindFunc( cast( void** )&AMotionEvent_getHistoricalSize, "AMotionEvent_getHistoricalSize" );
        bindFunc( cast( void** )&AMotionEvent_getHistoricalTouchMajor, "AMotionEvent_getHistoricalTouchMajor" );
        bindFunc( cast( void** )&AMotionEvent_getHistoricalTouchMinor, "AMotionEvent_getHistoricalTouchMinor" );
        bindFunc( cast( void** )&AMotionEvent_getHistoricalToolMajor, "AMotionEvent_getHistoricalToolMajor" );
        bindFunc( cast( void** )&AMotionEvent_getHistoricalToolMinor, "AMotionEvent_getHistoricalToolMinor" );
        bindFunc( cast( void** )&AMotionEvent_getHistoricalOrientation, "AMotionEvent_getHistoricalOrientation" );
        bindFunc( cast( void** )&AMotionEvent_getHistoricalAxisValue, "AMotionEvent_getHistoricalAxisValue" );
        bindFunc( cast( void** )&AInputQueue_attachLooper, "AInputQueue_attachLooper" );
        bindFunc( cast( void** )&AInputQueue_detachLooper, "AInputQueue_detachLooper" );
        bindFunc( cast( void** )&AInputQueue_hasEvents, "AInputQueue_hasEvents" );
        bindFunc( cast( void** )&AInputQueue_getEvent, "AInputQueue_getEvent" );
        bindFunc( cast( void** )&AInputQueue_preDispatchEvent, "AInputQueue_preDispatchEvent" );
        bindFunc( cast( void** )&AInputQueue_finishEvent, "AInputQueue_finishEvent" );
        bindFunc( cast( void** )&__android_log_write, "__android_log_write" );
        bindFunc( cast( void** )&ALooper_forThread, "ALooper_forThread" );
        bindFunc( cast( void** )&ALooper_prepare, "ALooper_prepare" );
        bindFunc( cast( void** )&ALooper_acquire, "ALooper_acquire" );
        bindFunc( cast( void** )&ALooper_release, "ALooper_release" );
        bindFunc( cast( void** )&ALooper_pollOnce, "ALooper_pollOnce" );
        bindFunc( cast( void** )&ALooper_pollAll, "ALooper_pollAll" );
        bindFunc( cast( void** )&ALooper_wake, "ALooper_wake" );
        bindFunc( cast( void** )&ALooper_addFd, "ALooper_addFd" );
        bindFunc( cast( void** )&ALooper_removeFd, "ALooper_removeFd" );
        bindFunc( cast( void** )&ANativeActivity_finish, "ANativeActivity_finish" );
        bindFunc( cast( void** )&ANativeActivity_setWindowFormat, "ANativeActivity_setWindowFormat" );
        bindFunc( cast( void** )&ANativeActivity_setWindowFlags, "ANativeActivity_setWindowFlags" );
        bindFunc( cast( void** )&ANativeActivity_showSoftInput, "ANativeActivity_showSoftInput" );
        bindFunc( cast( void** )&ANativeActivity_hideSoftInput, "ANativeActivity_hideSoftInput" );
        bindFunc( cast( void** )&ANativeWindow_acquire, "ANativeWindow_acquire" );
        bindFunc( cast( void** )&ANativeWindow_release, "ANativeWindow_release" );
        bindFunc( cast( void** )&ANativeWindow_getWidth, "ANativeWindow_getWidth" );
        bindFunc( cast( void** )&ANativeWindow_getHeight, "ANativeWindow_getHeight" );
        bindFunc( cast( void** )&ANativeWindow_getFormat, "ANativeWindow_getFormat" );
        bindFunc( cast( void** )&ANativeWindow_setBuffersGeometry, "ANativeWindow_setBuffersGeometry" );
        bindFunc( cast( void** )&ANativeWindow_lock, "ANativeWindow_lock" );
        bindFunc( cast( void** )&ANativeWindow_unlockAndPost, "ANativeWindow_unlockAndPost" );
        bindFunc( cast( void** )&AObbScanner_getObbInfo, "AObbScanner_getObbInfo" );
        bindFunc( cast( void** )&AObbInfo_delete, "AObbInfo_delete" );
        bindFunc( cast( void** )&AObbInfo_getPackageName, "AObbInfo_getPackageName" );
        bindFunc( cast( void** )&AObbInfo_getVersion, "AObbInfo_getVersion" );
        bindFunc( cast( void** )&AObbInfo_getFlags, "AObbInfo_getFlags" );
        bindFunc( cast( void** )&ASensorManager_getInstance, "ASensorManager_getInstance" );
        bindFunc( cast( void** )&ASensorManager_getSensorList, "ASensorManager_getSensorList" );
        bindFunc( cast( void** )&ASensorManager_getDefaultSensor, "ASensorManager_getDefaultSensor" );
        bindFunc( cast( void** )&ASensorManager_createEventQueue, "ASensorManager_createEventQueue" );
        bindFunc( cast( void** )&ASensorManager_destroyEventQueue, "ASensorManager_destroyEventQueue" );
        bindFunc( cast( void** )&ASensorEventQueue_enableSensor, "ASensorEventQueue_enableSensor" );
        bindFunc( cast( void** )&ASensorEventQueue_disableSensor, "ASensorEventQueue_disableSensor" );
        bindFunc( cast( void** )&ASensorEventQueue_setEventRate, "ASensorEventQueue_setEventRate" );
        bindFunc( cast( void** )&ASensorEventQueue_hasEvents, "ASensorEventQueue_hasEvents" );
        bindFunc( cast( void** )&ASensorEventQueue_getEvents, "ASensorEventQueue_getEvents" );
        bindFunc( cast( void** )&ASensor_getName, "ASensor_getName" );
        bindFunc( cast( void** )&ASensor_getVendor, "ASensor_getVendor" );
        bindFunc( cast( void** )&ASensor_getType, "ASensor_getType" );
        bindFunc( cast( void** )&ASensor_getResolution, "ASensor_getResolution" );
        bindFunc( cast( void** )&ASensor_getMinDelay, "ASensor_getMinDelay" );
        bindFunc( cast( void** )&AStorageManager_new, "AStorageManager_new" );
        bindFunc( cast( void** )&AStorageManager_delete, "AStorageManager_delete" );
        bindFunc( cast( void** )&AStorageManager_mountObb, "AStorageManager_mountObb" );
        bindFunc( cast( void** )&AStorageManager_unmountObb, "AStorageManager_unmountObb" );
        bindFunc( cast( void** )&AStorageManager_isObbMounted, "AStorageManager_isObbMounted" );
        bindFunc( cast( void** )&AStorageManager_getMountedObbPath, "AStorageManager_getMountedObbPath" );
    }
}

__gshared DerelictAndroidLoader DerelictAndroid;

shared static this() {
    DerelictAndroid = new DerelictAndroidLoader();
}
